#!/usr/bin/env python
#
# Todo: Read config file, use target as test for urlopen2
# Todo: Check to make sure we don't duplicate queue files
#

import urllib2, urllib, httplib, json
import logging
from os import walk,remove
from time import sleep
import ConfigParser

# Load Configuration
Config = ConfigParser.SafeConfigParser()
if path.isfile('titan.conf'):
  Config.read('titan.conf')
else:
  print "[!] Please create titan.conf"
  exit()

# Configure Logging
logging.basicConfig(format='%(message)s', level=logging.INFO)

# Get Reports function
def push_reports():
	for root, dirnames, filenames in walk('/var/log/titan/'):
		for tracker in filenames:
			json_data=open(root + tracker)
			data = json.load(json_data)
			status, response = send_request(Config.get('main', 'report_target'), data)
			
			if status == 200:
				remove(tracker)

# Send the request
def send_request( target, data):
	try:
		request = urllib2.Request(target, urllib.urlencode(data) )
		opener = urllib2.build_opener()
		response = opener.open(request)
		response_object = response.getcode(), response

	except urllib2.HTTPError, e:
		if e.code == 307:
			for line in str(e.headers).splitlines():
				if "Location" in line:
					new_target = line.split(": ", 1)[1]
					response_object = send_request( new_target, data )
		else:
			response_object = e.code, e.read()

	except urllib2.URLError, e:
		f = open("/var/log/titan/queue_%s.log" % sysdic['time'],'w')
		f.write(json.dumps(sysdic))
		f.close()
		response_object = 0, 'Connection Refused'

	return response_object


# Check if internet is available
while True:
    try:
        urllib2.urlopen("http://www.google.com").close()
    except urllib2.URLError:
        logging.info("Titan Watcher did not detect a connection, retrying in 60 seconds")
        sleep(60)
    else:
 		logging.info("Titan Watcher detected a connection")
 		push_reports
		sleep(300)
